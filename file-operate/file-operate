文件的打开(fopen函数):
    函数原型: FILE * fopen(const char * path,const char * mode)
    参数说明: FILE-->文件指针 path-->为文件名（包括文件路径） mode-->为打开方式
    打开方式mode说明:
        r  :以只读方式打开文件，只允许读取，不允许写入。该文件必须存在
        r+ :以读/写方式打开文件，允许读取和写入。该文件必须存在
        rb+:以读/写方式打开一个二进制文件，允许读/写数据，文件必须存在
        rt+:以读/写方式打开一个文本文件，允许读和写，文件必须存在
        w  :以只写方式打开文件，若文件存在则长度清为0，即该文件内容消失，若不存在则创建该文件
        w+ :以读/写方式打开文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件
        a  :追加的方式打开只写文件。若文件不存在，建立该文件，否则写入的数据会被加到文件尾(EOF保留)
        a+ :以追加方式打开可读/写的文件;
        wb :以只写方式打开或新建一个二进制文件，只允许写数据
        wb+:以读/写方式打开或建立一个二进制文件，允许读和写
        wt+:以读/写方式打开或建立一个文本文件，允许读写
        at+:以读/写方式打开一个文本文件，允许读或在文本末追加数据
        ab+:以读/写方式打开一个二进制文件，允许读或在文件末追加数据

文件关闭函数(fclose函数):将缓冲区内的数据写入文件中，并释放系统所提供的文件资源
    函数原型: int fclose(FILE *fp)
    参数说明: fp-->文件指针
    返回值说明: 文件正常关闭时，fclose() 的返回值为0，否则有错误发生时则返回EOF并把错误代码存到errno
    备注: 文件一旦使用完毕，应该用fclose()函数把文件关闭，以释放相关资源，避免数据丢失

文件打开方式由r、w、a、t、b、+ 六个字符拼成，各字符的含义是:
    r(read)：读
    w(write)：写
    a(append)：追加
    t(text)：文本文件，可省略不写
    b(banary)：二进制文件
    +：读和写

如果没有“b”字符，文件以文本方式打开

凡用“r”打开一个文件时，该文件必须已经存在

在打开一个文件时，如果出错，fopen将返回一个空指针值NULL

把一个文本文件读入内存时，要将ASCII码转换成二进制码，而把文件以文本方式写入磁盘时，也要把二进制码转换成ASCII码，因此文本文件的读写要花费较多的转换时间。对二进制文件的读写不存在这种转换

标准输入文件 stdin（键盘）、标准输出文件 stdout（显示器）、标准错误文件 stderr（显示器）是由系统打开的，可直接使用

fprintf函数:
    功能：传送格式化输出到一个文件中
    函数原型：int fprintf(FILE *stream, char *format[, argument,...]);
    参数说明：FILE* 一个FILE型的指针；char* 格式化输入函数，和printf里的格式一样
    返回值：成功时返回转换的字节数，失败时返回一个负数
    eg：fprintf(fp,"%s\n",str)

fscanf函数:
    功能：从一个流中执行格式化输入
    函数原型：int fscanf(FILE *stream, char *format[,argument...]);
    参数说明：FILE* 一个FILE型的指针；char* 格式化输出函数，和scanf里的格式一样
    返回值：成功时返回转换的字节数，失败时返回一个负数
    eg：fscanf(fp,"%s",str)

feof函数(检查文件流是否读到了文件尾):
    函数原型：int feof(FILE * stream)
    返回值：非零值代表已到达文件尾，其他情况返回0

fflush函数(更新缓冲区):
    函数原型： int fflush(FILE* stream);
    函数说明：强迫将缓冲区内的数据写回参数stream指定的文件中
    返回值说明：成功返回0，失败返回EOF

fgetc函数(由文件中读取一个字符):
    函数原型：int fgetc(FILE * stream);
    返回参数说明：返回一个字符，若读到文件尾部返回EOF

fputc函数(将一指定字符写入文件流中):
    函数原型：int fputc(int c,FILE * stream)
    函数说明：将参数c 转为unsigned char 后写入参数stream 指定的文件中
    返回参数说明：写入成功的字符，否则返回EOF

fgets函数(由文件中读取一字符串):
    函数原型：char * fgets(char * s,int size,FILE * stream);
    函数说明：文件内读入字符并存到参数s所指的内存空间，直到出现换行字符、读到文件尾或是已读了size-1个字符为止，最后会加上NULL作为字符串结束
    返回参数说明：成功则返回s指针，返回NULL则表示有错误发生

fputs函数(将一指定的字符串写入文件内):
    函数原型：int fputs(const char * s,FILE * stream);
    函数说明：将参数s所指的字符串写入到参数stream所指的文件内
    返回参数说明：成功则返回写出的字符个数，返回EOF则表示有错误发生

fread函数:
    函数原型：size_t fread(void * ptr,size_t size,size_t nmemb,FILE * stream);
    参数说明：stream为已打开的文件指针；ptr 指向欲存放读取进来的数据空间；读取的字符数以参数size*nmemb来决定
    返回参数说明：返回实际读取到的nmemb数目，如果此值比参数nmemb 来得小，则代表可能读到了文件尾或有错误发生，这时必须用feof()或ferror()来决定发生什么情况

fwrite函数:
    函数原型：size_t fwrite(const void * ptr,size_t size,size_t nmemb,FILE * stream);
    参数说明：stream为已打开的文件指针，参数ptr 指向欲写入的数据地址，总共写入的字符数以参数size*nmemb来决定
    返回值说明：返回实际写入的nmemb数目

freopen函数(打开文件):
    函数原型：FILE * freopen(const char * path,const char * mode,FILE * stream);
    函数说明：会将原stream所打开的文件流关闭，然后打开参数path的文件
    返回值说明：成功返回文件指针，失败返回NULL

fseek函数(移动文件流的读写位置):
    函数原型： int fseek(FILE * stream,long offset,int whence);
    函数说明：用来移动文件流的读写位置
    参数说明：stream为已打开的文件指针，参数offset为根据参数whence来移动读写位置的位移数
    whence类型:
        SEEK_SET从距文件开头offset位移量为新的读写位置；
        SEEK_CUR 以目前的读写位置往后增加offset个位移量；
        SEEK_END将读写位置指向文件尾后再增加offset个位移量
    备注：当whence值为SEEK_CUR 或SEEK_END时，参数offset允许负值的出现
    常用方式:
        欲将读写位置移动到文件开头时:fseek(FILE *stream,0,SEEK_SET);
        欲将读写位置移动到文件尾时:fseek(FILE *stream,0,SEEK_END);
    返回参数说明：成功时则返回0，若有错误则返回-1
    附加说明：fseek()不像lseek()会返回读写位置，因此必须使用ftell()来取得目前读写的位置

ftell函数(取得文件流的读取位置):
    函数原型：long ftell(FILE * stream);
    返回参数说明：当调用成功时则返回目前的读写位置，若有错误则返回-1

clearerr函数(清除文件流的错误旗标):
    函数原型：void clearerr(FILE * stream);

setbuf函数(设置文件流的缓冲区):
    函数原型：void setbuf(FILE * stream,char * buf);
    函数说明：在打开文件流后，读取内容之前，调用setbuf()可以用来设置文件流的缓冲区
    参数说明：参数stream为指定的文件流，参数buf指向自定的缓冲区起始地址；如果参数buf为NULL指针，则为无缓冲IO

setbuffer函数(设置文件流的缓冲区):
    函数原型：void setbuffer(FILE * stream,char * buf,size_t size)
    函数说明：在打开文件流后，读取内容之前，调用setbuffer()可用来设置文件流的缓冲区
    参数说明：stream为指定的文件流，参数buf指向自定的缓冲区起始地址，参数size为缓冲区大小

rewind函数(重设文件流的读写位置为文件开头):
    函数原型：void rewind(FILE * stream);
    函数说明：把文件流的读写位置移至文件开头
    备注：此函数相当于调用fseek(stream,0,SEEK_SET)

参考链接：http://www.cnblogs.com/likebeta/archive/2012/06/16/2551780.html
